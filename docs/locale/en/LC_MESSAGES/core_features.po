# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023-2024, BlenderHQ
# This file is distributed under the same license as the bhqrprt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bhqrprt 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-21 22:25+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../docs/core_features.rst:3
msgid "Features"
msgstr ""

#: ../../docs/core_features.rst:7
msgid "Simultaneous Console and File Logging"
msgstr ""

#: ../../docs/core_features.rst:9
msgid ""
"The package offers the ability to log messages both to the console and to log files simultaneously. Console logs are"
" color-coded based on severity level for quick readability, while detailed logs are saved in a structured format in "
"log files."
msgstr ""

#: ../../docs/core_features.rst:12
msgid "Colored Console Output"
msgstr ""

#: ../../docs/core_features.rst:14
msgid ""
"Logs are color-coded by severity (e.g., INFO, WARNING, ERROR), making it easy for developers to distinguish between "
"different log levels at a glance. This improves the debugging process by providing visual clarity."
msgstr ""

#: ../../docs/core_features.rst:17
msgid "Log Level Customization"
msgstr ""

#: ../../docs/core_features.rst:19
msgid ""
"The package allows developers to control what log level is displayed in the console while all levels are stored in "
"the log files. This way, you can focus on specific messages in real-time while still capturing a full log history "
"for future reference."
msgstr ""

#: ../../docs/core_features.rst:23
msgid "Log File Rotation and Cleanup"
msgstr ""

#: ../../docs/core_features.rst:25
msgid "The package automates the cleanup of old log files, ensuring that your log directory remains manageable over time."
msgstr ""

#: ../../docs/core_features.rst:28
msgid "Automatic Log Deletion"
msgstr ""

#: ../../docs/core_features.rst:30
msgid ""
"When a new log file is created, older logs are automatically deleted based on a user-defined retention policy. You "
"can configure how many logs to keep, preventing your log directory from becoming overcrowded and saving disk space."
msgstr ""

#: ../../docs/core_features.rst:32 ../../docs/core_features.rst:61 ../../docs/core_features.rst:82
msgid "Example:"
msgstr ""

#: ../../docs/core_features.rst:43
msgid "In this example, old logs are purged automatically, keeping only the most recent 30 log files."
msgstr ""

#: ../../docs/core_features.rst:47
msgid "Blender Addon Integration"
msgstr ""

#: ../../docs/core_features.rst:49
msgid ""
"The  package provides a specialized API designed for developers creating Blender addons. This API helps you track "
"operator execution, log settings, and report messages both to the UI and to the log files simultaneously."
msgstr ""

#: ../../docs/core_features.rst:52
msgid "Operator Execution Logs"
msgstr ""

#: ../../docs/core_features.rst:54
msgid ""
"Track the start and end times of Blender operator executions and automatically log these events. This is "
"particularly useful when performance tracking is important or when you need a clear audit trail for Blender's "
"operations."
msgstr ""

#: ../../docs/core_features.rst:57
msgid "Logging Settings and Scene Properties"
msgstr ""

#: ../../docs/core_features.rst:59
msgid ""
"The package allows developers to log Blender settings and scene properties easily. This is valuable when debugging "
"or sharing the current state of the Blender environment."
msgstr ""

#: ../../docs/core_features.rst:75
msgid ""
"In this example, both the addon's preferences and scene properties are logged, providing insights into the current "
"Blender configuration."
msgstr ""

#: ../../docs/core_features.rst:78
msgid "Unified Logging and Reporting"
msgstr ""

#: ../../docs/core_features.rst:80
msgid ""
"Blender operators often provide feedback to the user through `self.report`. With this package, you can log these "
"messages to the log files while still reporting them in the UI, ensuring both user-facing and internal logs are "
"captured."
msgstr ""

#: ../../docs/core_features.rst:95
msgid ""
"Here, a message is both reported in Blenderâ€™s UI and logged, providing a clear trace of what the user saw and what "
"was logged internally."
msgstr ""

#: ../../docs/core_features.rst:99
msgid "Seamless Addon Code Integration"
msgstr ""

#: ../../docs/core_features.rst:101
msgid ""
"The API is designed to be lightweight and easy to integrate into existing Blender addons, allowing developers to "
"improve their logging without drastically altering their code. You can integrate it in your operator classes, "
"logging key information such as settings and execution statuses."
msgstr ""

#~ msgid "**Simultaneous Console and File Logging:**"
#~ msgstr ""

#~ msgid "**Colored Console Output:**"
#~ msgstr ""

#~ msgid "**Log Level Customization:**"
#~ msgstr ""

#~ msgid "1. Simultaneous Console and File Logging:"
#~ msgstr ""

#~ msgid "Colored Console Output:"
#~ msgstr ""

#~ msgid "1. Simultaneous Console and File Logging"
#~ msgstr ""

#~ msgid "Log Level Customization:"
#~ msgstr ""

#~ msgid "**Log File Rotation and Cleanup:**"
#~ msgstr ""

#~ msgid "**Automatic Log Deletion:**"
#~ msgstr ""

#~ msgid "**Blender Addon Integration:**"
#~ msgstr ""

#~ msgid "**Operator Execution Logs:**"
#~ msgstr ""

#~ msgid "**Logging Settings and Scene Properties:**"
#~ msgstr ""

#~ msgid "**Unified Logging and Reporting:**"
#~ msgstr ""

#~ msgid "**Seamless Addon Code Integration:**"
#~ msgstr ""

